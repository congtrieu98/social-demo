// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Computer {
  id    String @id @default(cuid())
  brand String
  cores Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  feeds         Feed[]
  follows       Follow[]  @relation("Follows")
  followers     Follow[]  @relation("FollowedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id      String @id @default(cuid())
  title   String
  slug    String
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feed {
  id      String  @id @default(cuid())
  content String
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  medias  Media[]
}

model Media {
  id     String @id @default(cuid())
  url    String
  feedId String
  feed   Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade)
}

model Follow {
  id         String @id @default(cuid())
  followerId String
  followedId String
  follower   User   @relation("Follows", fields: [followerId], references: [id])
  followed   User   @relation("FollowedBy", fields: [followedId], references: [id])
}
